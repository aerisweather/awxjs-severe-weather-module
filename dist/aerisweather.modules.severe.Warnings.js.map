{"version":3,"sources":["webpack://Severe/./src/warnings/Warnings.ts"],"names":["source","type","data","service","properties","root","id","category","path","style","polygon","item","fill","color","opacity","weight","stroke","width","controls","value","this","title","infopanel","views","alert","renderer","body","replace","onInit","request","account","api","endpoint","action","filter","query","fields","limit","format","onShapeClick","shape","awxjs_source","props","showInfoPanel","details","name","load"],"mappings":";;;;;;;;qcAKA,2B,+CAmFA,OAnFuB,OAGnB,sBAAI,iBAAE,C,IAAN,WACI,MAAO,Y,gCAGX,YAAAA,OAAA,sBAQI,MAAO,CACHC,KAAM,SACNC,KAAM,CACFC,QAAS,WAAM,kBACfC,WAXgB,CACpBC,KAAM,WACNC,GAAI,yBACJC,SAAU,yBACVC,KAAM,aASNC,MAAO,CACHC,QAAS,SAACC,GAAc,MAAC,CACrBC,KAAM,CACFC,MAAO,IAAI,MAAUF,EAAM,4BAC3BG,QAAS,GACTC,OAAQ,GAEZC,OAAQ,CACJH,MAAO,IAAI,MAAUF,EAAM,4BAC3BM,MAAO,EACPF,OAAQ,QAO5B,YAAAG,SAAA,WACI,MAAO,CACHC,MAAOC,KAAKd,GACZe,MAAO,aAIf,YAAAC,UAAA,WACI,MAAO,CACHC,MAAO,CAAC,CACJrB,KAAM,SAAC,GAAc,SAAKsB,MAAL,SACrBC,SAAU,SAACvB,GACP,GAAKA,EAIL,MAAO,uBAAuBA,EAAKwB,MAAQ,IAAIC,QAAQ,MAAO,QAAO,cAMrF,YAAAC,OAAA,WACI,IAAMC,EAAUT,KAAKU,QAAQC,MACxBC,SAAS,cACTC,OAAM,UACNC,OAAO,OACPC,MAAM,kCACNC,OAAO,0DACPC,MAAM,KACNC,OAAO,WAEZlB,KAAKS,QAAUA,GAGnB,YAAAU,aAAA,SAAaC,EAAYtC,GACrB,IAAMF,EAASE,EAAKuC,aACdC,EAAQxC,EAAKE,YAAc,GAElB,aAAXJ,GACAoB,KAAKuB,cAAcD,EAAME,QAAQC,MAAMC,KAAK,GAAG,iBAAOJ,EAAME,QAAQC,MAAS,CACzErB,MAAOkB,KAIvB,EAnFA,CAAuB,KAqFR","file":"aerisweather.modules.severe.Warnings.js","sourcesContent":["import MapSourceModule from '@aerisweather/javascript-sdk/dist/modules/MapSourceModule';\nimport ApiRequest, { ApiAction } from '@aerisweather/javascript-sdk/dist/network/api/ApiRequest';\nimport * as utils from '@aerisweather/javascript-sdk/dist/utils/index';\nimport { toName } from '@aerisweather/javascript-sdk/dist/utils/strings';\n\nclass Warnings extends MapSourceModule {\n    private request: ApiRequest;\n\n    get id(): string {\n        return 'warnings';\n    }\n\n    source(): any {\n        const properties: any = {\n            root: 'features',\n            id: 'properties.details.loc',\n            category: 'properties.details.cat',\n            path: 'geometry'\n        };\n\n        return {\n            type: 'vector',\n            data: {\n                service: () => this.request,\n                properties\n            },\n            style: {\n                polygon: (item: any) => ({\n                    fill: {\n                        color: `#${utils.get(item, 'properties.details.color')}`,\n                        opacity: 0.4,\n                        weight: 3\n                    },\n                    stroke: {\n                        color: `#${utils.get(item, 'properties.details.color')}`,\n                        width: 2,\n                        weight: 3\n                    }\n                })\n            }\n        };\n    }\n\n    controls(): any {\n        return {\n            value: this.id,\n            title: 'Warnings'\n        };\n    }\n\n    infopanel(): any {\n        return {\n            views: [{\n                data: (data: any) => data.alert.details,\n                renderer: (data: any) => {\n                    if (!data) {\n                        return;\n                    }\n\n                    return `<div class=\"alert\">${(data.body || '').replace(/\\n/g, '<br>')}</div>`;\n                }\n            }]\n        };\n    }\n\n    onInit() {\n        const request = this.account.api()\n            .endpoint('advisories')\n            .action(ApiAction.SEARCH)\n            .filter('usa')\n            .query('type:TO.W;type:SV.W;type:FF.W;')\n            .fields('details.type,details.name,details.body,details,geoPoly')\n            .limit(100)\n            .format('geojson');\n\n        this.request = request;\n    }\n\n    onShapeClick(shape: any, data: any) {\n        const source = data.awxjs_source;\n        const props = data.properties || {};\n\n        if (source === 'warnings') {\n            this.showInfoPanel(props.details.name).load(`${toName(props.details.name)}`, {\n                alert: props\n            });\n        }\n    }\n}\n\nexport default Warnings;\n"],"sourceRoot":""}