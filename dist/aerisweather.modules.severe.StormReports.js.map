{"version":3,"sources":["webpack://Severe/./src/stormreports/StormReports.ts","webpack://Severe/./src/utils.ts"],"names":["color","code","toLowerCase","source","type","requreBounds","data","service","style","marker","className","svg","shape","fill","stroke","width","size","infopanel","views","payload","renderer","label","value","report","name","Date","timestamp","comments","reduce","result","row","push","join","onMarkerClick","id","this","showInfoPanel","load","p","stormreports","controls","title","onInit","request","account","api","endpoint","toRadians","degrees","Math","PI","getBearing","startLat","startLng","endLat","endLng","sy","sx","ey","ex","y","sin","cos","x","atan2","colorStormCell","getStormCellMarker","isCurrent","isLast","hidden","path","transform","bearing","viewBox","formatStormCells","forEach","cell","ob","loc","forecast","place","traits","points","lat","long","lon","locs","forecastLoc","trueBearing","length","dateTimeISO","getMagnitude","magnitude","cat","detail","snowIN","windSpeedMPH","rainIN","hailIN"],"mappings":"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","file":"aerisweather.modules.severe.StormReports.js","sourcesContent":["import MapSourceModule from '@aerisweather/javascript-sdk/dist/modules/MapSourceModule';\nimport ApiRequest from '@aerisweather/javascript-sdk/dist/network/api/ApiRequest';\nimport { ucwords } from '@aerisweather/javascript-sdk/dist/utils/strings';\nimport { formatDate, get } from '@aerisweather/javascript-sdk/dist/utils/index';\nimport { getMagnitude } from '../utils';\n\nconst color = (code: string): string => {\n    code = code.toLowerCase();\n\n    switch (code) {\n        case 'avalanche':\n            return '#639fec';\n        case 'blizzard':\n            return '#4100e2';\n        case 'flood':\n            return '#117d00';\n        case 'fog':\n            return '#767676';\n        case 'ice':\n            return '#e100e2';\n        case 'hail':\n            return '#62def7';\n        case 'lightning':\n            return '#8c8c8c';\n        case 'rain':\n            return '#38e600';\n        case 'snow':\n            return '#175cef';\n        case 'tides':\n            return '#40db83';\n        case 'tornado':\n            return '#c50000';\n        case 'wind':\n            return '#d8cc00';\n        default:\n            return '#000000';\n    }\n};\n\nclass StormReports extends MapSourceModule {\n    private request: ApiRequest;\n\n    get id(): string {\n        return 'stormreports';\n    }\n\n    source(): any {\n        return {\n            type: 'vector',\n            requreBounds: true,\n            data: {\n                service: () => this.request\n            },\n            style: {\n                marker: (data: any) => {\n                    const type: string = get(data, 'report.cat');\n\n                    return {\n                        className: 'marker-stormreport',\n                        svg: {\n                            shape: {\n                                type: 'circle',\n                                fill: {\n                                    color: color(type)\n                                },\n                                stroke: {\n                                    color: '#ffffff',\n                                    width: 2\n                                }\n                            }\n                        },\n                        size: [14, 14]\n                    };\n                }\n            }\n        };\n    }\n\n    infopanel(): any {\n        return {\n            views: [{\n                data: (data: any): any => {\n                    const payload = get(data, 'stormreports');\n\n                    if (!payload) {\n                        return;\n                    }\n\n                    return payload;\n                },\n                renderer: (data: any) => {\n                    if (!data) return;\n\n                    const rows: any[] = [{\n                        label: 'Location',\n                        value: data.report.name\n                    }, {\n                        label: 'Description',\n                        value: ucwords(data.report.type)\n                    }, {\n                        label: 'Magnitude',\n                        value: getMagnitude(data.report)\n                    }, {\n                        label: 'Report Time',\n                        value: formatDate(\n                            new Date(data.report.timestamp * 1000),\n                            'h:mm a, MMM d, yyyy'\n                        )\n                    }, {\n                        label: 'Remarks',\n                        value: data.report.comments || ''\n                    }];\n\n                    const content = rows\n                        .reduce((result, row) => {\n                            result.push(`\n                                <div class=\"awxjs__ui-row\">\n                                    <div class=\"awxjs__ui-expand label\">${row.label}</div>\n                                    <div class=\"awxjs__ui-expand value\">${row.value}</div>\n                                </div>\n                            `);\n\n                            return result;\n                        }, [])\n                        .join('\\n');\n\n                    return `\n                        <div class=\"awxjs__app__ui-panel-info__table\">\n                            ${content}\n                        </div>\n                    `;\n                }\n            }]\n        };\n    }\n\n    onMarkerClick(marker: any, data: any) {\n        if (!data) return;\n        const { id, report } = data;\n        const type = ucwords(report.type);\n        this.showInfoPanel(`${type}`).load({ p: id }, { stormreports: data });\n    }\n\n    controls(): any {\n        return {\n            value: this.id,\n            title: 'Storm Reports'\n        };\n    }\n\n    onInit() {\n        const request = this.account.api().endpoint('stormreports');\n        this.request = request;\n    }\n}\n\nexport default StormReports;\n","import { isEmpty, formatDate, isArray, get } from '@aerisweather/javascript-sdk/dist/utils/index';\nimport * as strings from '@aerisweather/javascript-sdk/dist/utils/strings';\n\nconst toRadians = (degrees: any) => (degrees * Math.PI) / 180;\n\nconst toDegrees = (radians: any) => (radians * 180) / Math.PI;\n\nconst getBearing = (startLat: any, startLng: any, endLat: any, endLng: any) => {\n    const sy = toRadians(startLat);\n    const sx = toRadians(startLng);\n    const ey = toRadians(endLat);\n    const ex = toRadians(endLng);\n\n    const y = Math.sin(ex - sx) * Math.cos(ey);\n    const x = Math.cos(sy) * Math.sin(ey) - Math.sin(sy) * Math.cos(ey) * Math.cos(ex - sx);\n\n    let result = Math.atan2(y, x);\n    result = toDegrees(result);\n\n    return (result + 360) % 360;\n};\n\nconst colorStormCell = (code: string): string => {\n    code = code.toLowerCase();\n\n    switch (code) {\n        case 'general':\n            return '#2ED300';\n        case 'hail':\n            return '#EBE100';\n        case 'rotating':\n            return '#F17200';\n        case 'tornado':\n            return '#FF2600';\n        default:\n            return '#000000';\n    }\n};\n\nexport const getStormCellMarker = (data: any): any => {\n    const { isCurrent } = data;\n    const { isLast } = data;\n    const type: string = get(data, 'traits.type');\n\n    if (isLast) {\n        const bearing = data.bearing ? data.bearing : 0;\n\n        return {\n            className: 'marker-stormcell',\n            svg: {\n                hidden: true,\n                shape: {\n                    type: 'path',\n                    path: 'M51.9,49.1L30.4,11.8L9,49.1C9,49.1,51.9,49.1,51.9,49.1z',\n                    fill: {\n                        color: '#ffffff'\n                    },\n                    transform: `rotate(${bearing},30,30)`\n                },\n                viewBox: '0 0 60 60'\n            },\n            size: [16, 16]\n        };\n    }\n\n    return {\n        className: 'marker-stormcell',\n        svg: {\n            shape: {\n                type: 'circle',\n                fill: {\n                    color: colorStormCell(type)\n                },\n                stroke: {\n                    color: '#ffffff',\n                    width: 2\n                }\n            }\n        },\n        size: isCurrent ? [15, 15] : [10, 10]\n    };\n};\n\nexport const formatStormCells = (data: any): any => {\n    if (isArray(data)) {\n        data.forEach((cell: any) => {\n            const {\n                id,\n                ob,\n                loc,\n                forecast,\n                place,\n                traits\n            } = cell;\n            let { points } = cell;\n            const startLat = loc.lat;\n            const startLng = loc.long;\n\n            points = [{\n                id,\n                ...ob,\n                traits,\n                forecast,\n                place,\n                loc: {\n                    lat: loc.lat,\n                    lon: loc.long\n                },\n                isCurrent: true\n            }];\n\n            if (forecast && forecast.locs) {\n                (forecast.locs || []).forEach((forecastLoc: any) => {\n                    const endLat = forecastLoc.lat;\n                    const endLng = forecastLoc.long;\n                    const trueBearing = getBearing(startLat, startLng, endLat, endLng);\n                    let isLast = false;\n\n                    if (forecast.locs[forecast.locs.length - 1] === forecastLoc) {\n                        isLast = true;\n                        points.push({\n                            ...ob,\n                            timestamp: forecastLoc.timestamp,\n                            dateTimeISO: forecastLoc.dateTimeISO,\n                            bearing: trueBearing,\n                            place,\n                            forecast,\n                            traits,\n                            loc: {\n                                lat: forecastLoc.lat,\n                                lon: forecastLoc.long\n                            },\n                            isCurrent: false,\n                            isLast\n                        });\n                    }\n                });\n            }\n\n            cell.points = points;\n        });\n    }\n\n    return data;\n};\n\nexport const getStormCellForecast = (aeris: any, forecast: any) => {\n    const { utils } = aeris;\n    const request = aeris.api();\n    const final: any = [];\n\n    for (let i = 0; i < forecast.locs.length; i += 1) {\n        request.addRequest(\n            aeris\n                .api()\n                .endpoint('places')\n                .place(`${forecast.locs[i].lat},${forecast.locs[i].long}`)\n                .fields('place.name,place.state')\n        );\n    }\n\n    request.get().then((result: any) => {\n        for (let i = 0; i < forecast.locs.length; i += 1) {\n            const object: any = {};\n            const place = `\n                ${result.data.responses[i].response.place.name},\n                ${result.data.responses[i].response.place.state}\n            `;\n            const time = utils.dates.format(\n                new Date(forecast.locs[i].timestamp * 1000),\n                'h:mm a, MMM d, yyyy'\n            );\n\n            object.place = place;\n            object.time = time;\n            final.push(object);\n        }\n    });\n\n    return final;\n};\n\nexport const getMagnitude = (data: any) => {\n    let magnitude = '';\n\n    if (data.cat === 'snow' && !isEmpty(data.detail.snowIN)) {\n        magnitude = `${data.detail.snowIN} inches`;\n    }\n\n    if (data.cat === 'wind' && !isEmpty(data.detail.windSpeedMPH)) {\n        magnitude = `${data.detail.windSpeedMPH} mph`;\n    }\n\n    if (data.cat === 'rain' && !isEmpty(data.detail.rainIN)) {\n        magnitude = `${data.detail.rainIN} inches`;\n    }\n\n    if (data.cat === 'hail' && !isEmpty(data.detail.hailIN)) {\n        magnitude = `${data.detail.hailIN} inches`;\n    }\n\n    return magnitude;\n};\n\nexport const getStormReportMarkerContent = (data: any) => {\n    let details = '';\n\n    if (data.report.cat === 'hail' && !isEmpty(data.report.detail.hailIN)) {\n        details = `\n            <div class=\"row\">\n                <div class=\"label\">Hail Diameter:</div>\n                <div class=\"value\">\n                    ${data.report.detail.hailIN.toFixed(2)} in\n                </div>\n            </div>`;\n    }\n\n    if (data.report.cat === 'wind' && !isEmpty(data.report.detail.windSpeedMPH)) {\n        details = `\n            <div class=\"row\">\n                <div class=\"label\">Wind Speed:</div>\n                <div class=\"value\">\n                    ${data.report.detail.windSpeedMPH} mph\n                </div>\n            </div>`;\n    }\n\n    if (data.report.cat === 'rain' && !isEmpty(data.report.detail.rainIN)) {\n        details = `\n            <div class=\"row\">\n                <div class=\"label\">Rainfall:</div>\n                <div class=\"value\">\n                    ${data.report.detail.rainIN.toFixed(2)} in\n                </div>\n            </div>`;\n    }\n\n    return `\n        <div class=\"content\">\n            <div class=\"title\">\n                ${strings.toName(data.report.type)}\n            </div>\n            <div class=\"row\">\n                <div class=\"label\">Location:</div>\n                <div class=\"value\">\n                    ${data.report.name}\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"label\">Date:</div>\n                <div class=\"value\">\n                    ${formatDate(new Date(data.report.timestamp * 1000), 'h:mm a, MMM d, yyyy')}\n                </div>\n            </div>\n            ${details}\n            <div class=\"row\">\n                <div class=\"label\">Reporter:</div>\n                <div class=\"value\">\n                    ${data.report.reporter}\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"label\">WFO:</div>\n                <div class=\"value\">\n                    ${data.report.wfo.toUpperCase()}\n                </div>\n            </div>\n            ${!isEmpty(data.report.comments) ? `\n            <div class=\"row\">\n                <div class=\"label\">Comments</div>\n                <div class=\"value\">\n                    ${data.report.comments}\n                </div>\n            </div>\n            ` : ''}\n        </div>\n    `;\n};\n"],"sourceRoot":""}