{"version":3,"sources":["webpack://Severe/./src/stormcells/StormCells.ts","webpack://Severe/./src/utils.ts"],"names":["colors","general","hail","rotating","tornado","source","type","requiresBounds","data","service","properties","id","path","category","timestamp","points","formatter","style","marker","polyline","stroke","color","width","infopanel","request","locations","length","account","api","forEach","lat","long","request_","endpoint","place","radius","fields","addRequest","views","requiresData","renderer","code","movement","traits","metric","placeName","name","state","toUpperCase","movementBlock","dirTo","toLowerCase","stormcells","dbzm","result","push","value","severity","cell","tvs","probSevere","getSeverity","map","hazard","index","level","label","Math","floor","indexForSeverity","indexString","replace","percent","round","join","title","places","loc","key","filter","v","names","includes","time","Date","payload","radarID","mda","vil","reduce","row","controls","this","onInit","onMarkerClick","cellId","showInfoPanel","load","p","toRadians","degrees","PI","getBearing","startLat","startLng","endLat","endLng","sy","sx","ey","ex","y","sin","cos","x","atan2","colorStormCell","getStormCellMarker","isCurrent","isLast","className","svg","hidden","shape","fill","transform","bearing","viewBox","size","formatStormCells","ob","forecast","lon","locs","forecastLoc","trueBearing","dateTimeISO","getMagnitude","magnitude","cat","detail","snowIN","windSpeedMPH","rainIN","hailIN"],"mappings":"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","file":"aerisweather.modules.severe.StormCells.js","sourcesContent":["import MapSourceModule from '@aerisweather/javascript-sdk/dist/modules/MapSourceModule';\nimport ApiRequest from '@aerisweather/javascript-sdk/dist/network/api/ApiRequest';\nimport { formatDate, get, isset } from '@aerisweather/javascript-sdk/dist/utils/index';\nimport { toName } from '@aerisweather/javascript-sdk/dist/utils/strings';\nimport { formatDataValue } from '@aerisweather/javascript-sdk/dist/utils/units';\nimport { formatStormCells, getStormCellMarker } from '../utils';\n\nconst colors: any = {\n    general: '#2ed300',\n    hail: '#ebe100',\n    rotating: '#f17200',\n    tornado: '#ff2600'\n};\n\nconst indexForIntensity = (value: number): any => {\n    if (value >= 60) {\n        return { index: 5, label: 'Extreme' };\n    }\n\n    if (value >= 55) {\n        return { index: 4, label: 'Very Heavy' };\n    }\n\n    if (value >= 50) {\n        return { index: 3, label: 'Heavy' };\n    }\n\n    if (value >= 35) {\n        return { index: 2, label: 'Moderate' };\n    }\n\n    if (value >= 20) {\n        return { index: 1, label: 'Light' };\n    }\n\n    return { index: 0, label: 'Very Light' };\n};\n\nconst indexForSeverity = (value: number): any => {\n    // `value` is in the range 0..10 and needs to be converted to an index value in\n    // the range 0..5\n    const index = Math.floor(value / 2);\n    const labels = ['None', 'Minimal', 'Low', 'Moderate', 'High', 'Extreme'];\n\n    return { index, label: labels[index] };\n};\n\nconst getSeverity = (cell: any = {}): number => {\n    const {\n        hail, tvs, traits\n    } = cell;\n    let severity = 0;\n\n    if (isset(hail) && hail.probSevere > 0) {\n        severity = hail.probSevere / 10;\n    }\n\n    if (isset(traits) && severity < 10) {\n        const { rotating, tornado } = traits;\n\n        if (rotating) {\n            severity = 7;\n        }\n\n        if (tornado) {\n            severity = 10;\n        }\n    }\n\n    if (severity < 8 && tvs === 1) {\n        severity = 8;\n    }\n\n    return severity;\n};\n\nconst getColor = (code: string): string => {\n    code = (code || 'none').toLowerCase();\n\n    return colors[code] || '#999999';\n};\nclass StormCells extends MapSourceModule {\n    private request: ApiRequest;\n\n    get id() {\n        return 'stormcells';\n    }\n\n    source(): any {\n        const properties: any = {\n            id: 'id',\n            path: 'points',\n            category: 'traits.type',\n            timestamp: 'ob.timestamp',\n            points: 'points'\n        };\n\n        return {\n            type: 'vector',\n            requiresBounds: true,\n            data: {\n                service: () => this.request,\n                properties,\n                formatter: (data: any) => formatStormCells(data)\n            },\n            style: {\n                marker: (data: any) => getStormCellMarker(data),\n                polyline: () => ({\n                    stroke: {\n                        color: '#ffffff',\n                        width: 3\n                    }\n                })\n            }\n        };\n    }\n\n    infopanel(): any {\n        return {\n            request: (data: any) => {\n                const locations = get(data, 'stormcells.forecast.locs') || [];\n\n                if (!locations || locations.length === 0) {\n                    return;\n                }\n\n                const request = this.account.api();\n                locations.forEach(({ lat, long }: any) => {\n                    const request_ = this.account\n                        .api()\n                        .endpoint('places')\n                        .place(`${lat},${long}`)\n                        .radius('10mi')\n                        .fields('place.name,place.state');\n                    request.addRequest(request_);\n                });\n\n                return request;\n            },\n            views: [{\n                // place info\n                requiresData: true,\n                data: (data: any): any => {\n                    if (!get(data, 'stormcells')) return;\n\n                    return data;\n                },\n                renderer: (data: any): string => {\n                    if (!data) return;\n\n                    const {\n                        stormcells: {\n                            place, movement, traits = {}\n                        },\n                        metric\n                    } = data;\n                    const placeName = `${toName(place.name)}, ${place.state.toUpperCase()}`;\n\n                    const movementBlock = isset(movement) ? `\n                            <div class=\"awxjs__ui-row\">\n                                <div>\n                                    Moving ${movement.dirTo}\n                                    at ${formatDataValue(movement, 'speedMPH', 'speedKMH', metric)}\n                                </div>\n                            </div>\n                        ` : '';\n\n                    return `\n                        <div class=\"stormtrack-loc awxjs__app__ui-panel-info__table\">\n                            <div class=\"awxjs__ui-row\">\n                                <div class=\"awxjs__ui-cols align-center\">\n                                    <div class=\"awxjs__ui-expand awxjs__text-lg value\">\n                                        <strong>Near ${placeName}</strong>\n                                    </div>\n                                    <div>\n                                        <div class=\"indicator\" style=\"background:${getColor(traits.type)};\"></div>\n                                    </div>\n                                </div>\n                            </div>\n                            ${movementBlock}\n                        </div>\n                    `;\n                }\n            }, {\n                // severity levels\n                requiresData: true,\n                data: (data: any) => {\n                    const stormcells = get(data, 'stormcells');\n\n                    if (!stormcells) return;\n\n                    const { dbzm } = stormcells;\n                    const result: any[] = [];\n\n                    if (isset(dbzm)) {\n                        result.push({\n                            type: 'intensity',\n                            name: 'Intensity',\n                            value: dbzm\n                        });\n                    }\n\n                    const severity = getSeverity(data.stormcells);\n                    result.push({\n                        type: 'severity',\n                        name: 'Severity',\n                        value: severity\n                    });\n\n                    return result;\n                },\n                renderer: (data: any): string => {\n                    const hazards = data.map((hazard: any) => {\n                        let index = 0;\n                        let level = '';\n\n                        if (hazard.type === 'intensity') {\n                            const { index: hazardIndex, label } = indexForIntensity(hazard.value);\n                            index = hazardIndex;\n                            level = label;\n                        } else if (hazard.type === 'severity') {\n                            const { index: hazardIndex, label } = indexForSeverity(hazard.value);\n                            index = hazardIndex;\n                            level = label;\n                        }\n\n                        const indexString = `${index}`.replace(/\\./g, 'p');\n                        const percent = Math.round((index / 5) * 1000) / 10;\n\n                        return `\n                            <div class=\"awxjs__app__ui-panel-info__hazard awxjs__ui-cols align-center\">\n                                <div class=\"awxjs__app__ui-panel-info__hazard-label\">\n                                    ${hazard.name}\n                                </div>\n                                <div class=\"awxjs__app__ui-panel-info__hazard-bar\">\n                                    <div class=\"awxjs__app__ui-panel-info__hazard-bar-inner\">\n                                        <div\n                                            class=\"awxjs__app__ui-panel-info__hazard-bar-progress\n                                                awxjs__app__ui-panel-info__hazard-indice-fill-${indexString}\"\n                                            style=\"width:${percent}%;\"\n                                        ></div>\n                                    </div>\n                                </div>\n                                <div\n                                    class=\"awxjs__app__ui-panel-info__hazard-value\n                                        awxjs__app__ui-panel-info__hazard-value-${indexString}\"\n                                    >${level}</div>\n                            </div>\n                        `;\n                    });\n\n                    return `\n                        <div class=\"awxjs__app__ui-panel-info__hazards\">\n                            ${hazards.join('')}\n                        </div>\n                    `;\n                }\n            }, {\n                // forecast track\n                title: 'Forecast Track',\n                requiresData: true,\n                data: (data: any) => {\n                    const locations = get(data, 'stormcells.forecast.locs');\n\n                    if (!locations) return;\n\n                    // filter out invalid place results\n                    const places = locations\n                        .map((loc: any) => {\n                            const key = `places_${loc.lat}_${loc.long}`;\n                            const place: any = data[key];\n\n                            if (place && isset(place.place)) {\n                                return { timestamp: loc.timestamp, ...place };\n                            }\n\n                            return false;\n                        })\n                        .filter((v: any) => v);\n\n                    if (places.length === 0) return;\n\n                    data.locations = places;\n\n                    return data;\n                },\n                renderer: (data: any): string => {\n                    const locations = get(data, 'locations') || [];\n                    const names: string[] = [];\n                    const rows = locations.map((loc: any) => {\n                        const { place, timestamp } = loc;\n\n                        if (names.includes(place.name)) {\n                            return;\n                        }\n                        names.push(place.name);\n\n                        const time = formatDate(new Date(timestamp * 1000), 'h:mm a');\n\n                        return `\n                            <div class=\"awxjs__ui-row\">\n                                <div class=\"awxjs__ui-expand label\">${place.name}</div>\n                                <div class=\"awxjs__ui-expand value\">${time}</div>\n                            </div>\n                        `;\n                    });\n\n                    return `\n                        <div class=\"awxjs__app__ui-panel-info__table\">\n                            ${rows.filter((v: any) => typeof v !== 'undefined').join('\\n')}\n                        </div>\n                    `;\n                }\n            }, {\n                // details\n                requiresData: true,\n                data: (data: any) => {\n                    const payload = get(data, 'stormcells');\n\n                    if (!payload) {\n                        return;\n                    }\n\n                    return payload;\n                },\n                renderer: (data: any) => {\n                    const {\n                        metric,\n                        timestamp,\n                        radarID,\n                        dbzm,\n                        tvs,\n                        mda,\n                        vil\n                    } = data;\n\n                    const rows: any[] = [{\n                        label: 'Observed',\n                        value: formatDate(\n                            new Date(timestamp * 1000),\n                            'h:mm a, MMM d, yyyy'\n                        )\n                    }, {\n                        label: 'Radar Station',\n                        value: radarID\n                    }, {\n                        label: 'Max Reflectivity',\n                        value: `${dbzm} dbz`\n                    }, {\n                        label: 'Echo Top',\n                        value: formatDataValue(data, 'htFT', 'htM', metric)\n                    }, {\n                        label: 'TVS',\n                        value: tvs === 1 ? 'Yes' : 'No'\n                    }, {\n                        label: 'Hail',\n                        value: `${get(data, 'hail.prob') || 0}% Probability`\n                    }, {\n                        label: 'Severe Hail',\n                        value: `${get(data, 'hail.probSevere') || 0}% Probability`\n                    }, {\n                        label: 'Max Hail Size',\n                        value: formatDataValue(data, 'hail.maxSizeIN', 'hail.maxSizeCM', metric)\n                    }, {\n                        label: 'MDA',\n                        value: mda\n                    }, {\n                        label: 'VIL',\n                        value: vil\n                    }];\n\n                    const content = rows.reduce((result, row) => {\n                        result.push(`\n                            <div class=\"awxjs__ui-row\">\n                                <div class=\"awxjs__ui-expand label\">${row.label}</div>\n                                <div class=\"awxjs__ui-expand value\">${row.value}</div>\n                            </div>\n                        `);\n\n                        return result;\n                    }, []).join('\\n');\n\n                    return `\n                        <div class=\"awxjs__app__ui-panel-info__table\">\n                            ${content}\n                        </div>\n                    `;\n                }\n            }]\n        };\n    }\n\n    controls(): any {\n        return {\n            value: this.id,\n            title: 'Storm Cells'\n        };\n    }\n\n    onInit() {\n        const request = this.account.api().endpoint('stormcells');\n        this.request = request;\n    }\n\n    onMarkerClick(marker: any, data: any) {\n        if (!data) return;\n\n        const {\n            id, radarID, cellID\n        } = data;\n        const cellId = `${radarID}_${cellID}`;\n        this.showInfoPanel(`Cell ${cellId}`).load({ p: id }, { stormcells: data });\n    }\n}\n\nexport default StormCells;\n","import { isEmpty, formatDate, isArray, get } from '@aerisweather/javascript-sdk/dist/utils/index';\nimport * as strings from '@aerisweather/javascript-sdk/dist/utils/strings';\n\nconst toRadians = (degrees: any) => (degrees * Math.PI) / 180;\n\nconst toDegrees = (radians: any) => (radians * 180) / Math.PI;\n\nconst getBearing = (startLat: any, startLng: any, endLat: any, endLng: any) => {\n    const sy = toRadians(startLat);\n    const sx = toRadians(startLng);\n    const ey = toRadians(endLat);\n    const ex = toRadians(endLng);\n\n    const y = Math.sin(ex - sx) * Math.cos(ey);\n    const x = Math.cos(sy) * Math.sin(ey) - Math.sin(sy) * Math.cos(ey) * Math.cos(ex - sx);\n\n    let result = Math.atan2(y, x);\n    result = toDegrees(result);\n\n    return (result + 360) % 360;\n};\n\nconst colorStormCell = (code: string): string => {\n    code = code.toLowerCase();\n\n    switch (code) {\n        case 'general':\n            return '#2ED300';\n        case 'hail':\n            return '#EBE100';\n        case 'rotating':\n            return '#F17200';\n        case 'tornado':\n            return '#FF2600';\n        default:\n            return '#000000';\n    }\n};\n\nexport const getStormCellMarker = (data: any): any => {\n    const { isCurrent } = data;\n    const { isLast } = data;\n    const type: string = get(data, 'traits.type');\n\n    if (isLast) {\n        const bearing = data.bearing ? data.bearing : 0;\n\n        return {\n            className: 'marker-stormcell',\n            svg: {\n                hidden: true,\n                shape: {\n                    type: 'path',\n                    path: 'M51.9,49.1L30.4,11.8L9,49.1C9,49.1,51.9,49.1,51.9,49.1z',\n                    fill: {\n                        color: '#ffffff'\n                    },\n                    transform: `rotate(${bearing},30,30)`\n                },\n                viewBox: '0 0 60 60'\n            },\n            size: [16, 16]\n        };\n    }\n\n    return {\n        className: 'marker-stormcell',\n        svg: {\n            shape: {\n                type: 'circle',\n                fill: {\n                    color: colorStormCell(type)\n                },\n                stroke: {\n                    color: '#ffffff',\n                    width: 2\n                }\n            }\n        },\n        size: isCurrent ? [15, 15] : [10, 10]\n    };\n};\n\nexport const formatStormCells = (data: any): any => {\n    if (isArray(data)) {\n        data.forEach((cell: any) => {\n            const {\n                id,\n                ob,\n                loc,\n                forecast,\n                place,\n                traits\n            } = cell;\n            let { points } = cell;\n            const startLat = loc.lat;\n            const startLng = loc.long;\n\n            points = [{\n                id,\n                ...ob,\n                traits,\n                forecast,\n                place,\n                loc: {\n                    lat: loc.lat,\n                    lon: loc.long\n                },\n                isCurrent: true\n            }];\n\n            if (forecast && forecast.locs) {\n                (forecast.locs || []).forEach((forecastLoc: any) => {\n                    const endLat = forecastLoc.lat;\n                    const endLng = forecastLoc.long;\n                    const trueBearing = getBearing(startLat, startLng, endLat, endLng);\n                    let isLast = false;\n\n                    if (forecast.locs[forecast.locs.length - 1] === forecastLoc) {\n                        isLast = true;\n                        points.push({\n                            ...ob,\n                            timestamp: forecastLoc.timestamp,\n                            dateTimeISO: forecastLoc.dateTimeISO,\n                            bearing: trueBearing,\n                            place,\n                            forecast,\n                            traits,\n                            loc: {\n                                lat: forecastLoc.lat,\n                                lon: forecastLoc.long\n                            },\n                            isCurrent: false,\n                            isLast\n                        });\n                    }\n                });\n            }\n\n            cell.points = points;\n        });\n    }\n\n    return data;\n};\n\nexport const getStormCellForecast = (aeris: any, forecast: any) => {\n    const { utils } = aeris;\n    const request = aeris.api();\n    const final: any = [];\n\n    for (let i = 0; i < forecast.locs.length; i += 1) {\n        request.addRequest(\n            aeris\n                .api()\n                .endpoint('places')\n                .place(`${forecast.locs[i].lat},${forecast.locs[i].long}`)\n                .fields('place.name,place.state')\n        );\n    }\n\n    request.get().then((result: any) => {\n        for (let i = 0; i < forecast.locs.length; i += 1) {\n            const object: any = {};\n            const place = `\n                ${result.data.responses[i].response.place.name},\n                ${result.data.responses[i].response.place.state}\n            `;\n            const time = utils.dates.format(\n                new Date(forecast.locs[i].timestamp * 1000),\n                'h:mm a, MMM d, yyyy'\n            );\n\n            object.place = place;\n            object.time = time;\n            final.push(object);\n        }\n    });\n\n    return final;\n};\n\nexport const getMagnitude = (data: any) => {\n    let magnitude = '';\n\n    if (data.cat === 'snow' && !isEmpty(data.detail.snowIN)) {\n        magnitude = `${data.detail.snowIN} inches`;\n    }\n\n    if (data.cat === 'wind' && !isEmpty(data.detail.windSpeedMPH)) {\n        magnitude = `${data.detail.windSpeedMPH} mph`;\n    }\n\n    if (data.cat === 'rain' && !isEmpty(data.detail.rainIN)) {\n        magnitude = `${data.detail.rainIN} inches`;\n    }\n\n    if (data.cat === 'hail' && !isEmpty(data.detail.hailIN)) {\n        magnitude = `${data.detail.hailIN} inches`;\n    }\n\n    return magnitude;\n};\n\nexport const getStormReportMarkerContent = (data: any) => {\n    let details = '';\n\n    if (data.report.cat === 'hail' && !isEmpty(data.report.detail.hailIN)) {\n        details = `\n            <div class=\"row\">\n                <div class=\"label\">Hail Diameter:</div>\n                <div class=\"value\">\n                    ${data.report.detail.hailIN.toFixed(2)} in\n                </div>\n            </div>`;\n    }\n\n    if (data.report.cat === 'wind' && !isEmpty(data.report.detail.windSpeedMPH)) {\n        details = `\n            <div class=\"row\">\n                <div class=\"label\">Wind Speed:</div>\n                <div class=\"value\">\n                    ${data.report.detail.windSpeedMPH} mph\n                </div>\n            </div>`;\n    }\n\n    if (data.report.cat === 'rain' && !isEmpty(data.report.detail.rainIN)) {\n        details = `\n            <div class=\"row\">\n                <div class=\"label\">Rainfall:</div>\n                <div class=\"value\">\n                    ${data.report.detail.rainIN.toFixed(2)} in\n                </div>\n            </div>`;\n    }\n\n    return `\n        <div class=\"content\">\n            <div class=\"title\">\n                ${strings.toName(data.report.type)}\n            </div>\n            <div class=\"row\">\n                <div class=\"label\">Location:</div>\n                <div class=\"value\">\n                    ${data.report.name}\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"label\">Date:</div>\n                <div class=\"value\">\n                    ${formatDate(new Date(data.report.timestamp * 1000), 'h:mm a, MMM d, yyyy')}\n                </div>\n            </div>\n            ${details}\n            <div class=\"row\">\n                <div class=\"label\">Reporter:</div>\n                <div class=\"value\">\n                    ${data.report.reporter}\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"label\">WFO:</div>\n                <div class=\"value\">\n                    ${data.report.wfo.toUpperCase()}\n                </div>\n            </div>\n            ${!isEmpty(data.report.comments) ? `\n            <div class=\"row\">\n                <div class=\"label\">Comments</div>\n                <div class=\"value\">\n                    ${data.report.comments}\n                </div>\n            </div>\n            ` : ''}\n        </div>\n    `;\n};\n"],"sourceRoot":""}